@* This is a /quotes route *@
@page "/quotes"
@* Injecting a HttpClient object to make request to an API*@
@inject HttpClient client

@inject IJSRuntime JS

<h1 class="display-4">@Title</h1>
<style>
    #myButton {
        margin-bottom: 2.5em;
    }

    #navInputBox {
        width: 28%;
    }
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }
</style>
@*Checking if the collection of quotes is empty*@
@if (friend.listOfQuotes == null)
{   
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden"></span>
    </div>
}
else
{
    @*Random quote button*@
    <button type="button" class="btn btn-sm btn-primary" @onclick="Alert" id="myButton">Random Quote</button>

    <nav class="navbar navbar-light bg-light" id="navInputBox">
        <form class="container-fluid">
            <div class="input-group">
                <span class="input-group-text" id="basic-addon1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />
                    </svg>
                </span>
                <input type="text" class="form-control" placeholder="Character or Keyword i.e Pivot" aria-label="Character" aria-describedby="basic-addon1" @bind="@friend.InputValue" @oninput="@((e) => { friend.InputValue = (string)e.Value; })" >
            </div>
        </form>
    </nav>

    <table class="table">
        <thead>
            <tr>
                <th class="sort-th" @onclick="@(() => friend.SortTable("Character"))">Character</th>
                <th>Quote</th>
            </tr>
        </thead>

        <tbody>
            @*Iterate through each item on the list collection*@
            @foreach (var item in friend.listOfQuotes.Where(x => friend.IsVisible(x)))
            {
                <tr>
                    <td>@item.character</td>
                    <td>@item.quote</td>
                </tr>
            }
        </tbody>
    </table>
}

@* The @code allows us to generate C# code and call it within this class *@
@code {
    private string Title = "Friends Quotes"; // Title data
    private QueryFriends friend = new QueryFriends
    {
        listOfQuotes = new List<FriendsResponseData>()
    };

    private FriendsResponseData randomQuote;
    public string Message
    {
        get
        {
            return $"{randomQuote.quote} ({randomQuote.character})";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        friend.listOfQuotes = await client.GetFromJsonAsync<List<FriendsResponseData>>("https://friends-quotes-api.herokuapp.com/quotes");
        randomQuote = await client.GetFromJsonAsync<FriendsResponseData>("https://friends-quotes-api.herokuapp.com/quotes/random");
    }

    private async Task Alert()
    {
        await JS.InvokeAsync<string>("Alert", Message);
    }
}
